// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/ekalinin/awsping"

type Region struct {
	Name string
	Code string
}

func page(regions []awsping.AWSRegion) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html><head><title>AWS Region Pinger</title><style>\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 20px;\n                background: #f5f5f5;\n            }\n            .client-ping {\n                background: white;\n                padding: 15px;\n                margin-bottom: 20px;\n                border-radius: 4px;\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n            }\n            .client-ping .value {\n                font-family: monospace;\n                font-weight: bold;\n            }\n            table {\n                width: 100%;\n                border-collapse: collapse;\n                background: white;\n                box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n                border-radius: 4px;\n            }\n            th, td {\n                padding: 12px;\n                text-align: left;\n                border-bottom: 1px solid #eee;\n            }\n            th {\n                background: #f8f9fa;\n                font-weight: 600;\n            }\n            .status {\n                min-width: 80px;\n                display: inline-block;\n            }\n            .pending {\n                color: #666;\n                font-style: italic;\n            }\n            .error {\n                color: #dc3545;\n            }\n            .latency {\n                font-family: monospace;\n                font-size: 14px;\n                min-width: 80px;\n            }\n        </style></head><body><h1>AWS Region Pinger</h1><div class=\"client-ping\">Your ping: <span class=\"value\" id=\"clientPing\">Measuring...</span></div><table id=\"results\"><thead><tr><th>Region</th><th>Code</th><th>Latency</th><th>Status</th></tr></thead> <tbody>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, region := range regions {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<tr data-code=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(region.Code)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 84, Col: 47}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(region.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 85, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(region.Code)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 86, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</td><td class=\"latency\">Pending...</td><td class=\"status pending\">Pinging...</td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</tbody></table><script>\n            const clientPingElement = document.getElementById('clientPing');\n            const evtSource = new EventSource('/ping');\n            \n            evtSource.onmessage = (event) => {\n                const result = JSON.parse(event.data);\n                \n                // Update client ping if available\n                if (result.clientPing !== undefined) {\n                    clientPingElement.textContent = result.clientPing.toFixed(2) + ' ms';\n                }\n                \n                // Find the row\n                const row = document.querySelector('tr[data-code=\"' + result.code + '\"]');\n                if (!row) return;\n                \n                // Update latency and status\n                const latencyCell = row.querySelector('.latency');\n                const statusCell = row.querySelector('.status');\n                \n                if (result.error) {\n                    latencyCell.textContent = 'N/A';\n                    statusCell.textContent = result.error;\n                    statusCell.className = 'status error';\n                } else {\n                    latencyCell.textContent = result.latency.toFixed(2) + ' ms';\n                    statusCell.textContent = 'Success';\n                    statusCell.className = 'status';\n                }\n            };\n            \n            evtSource.onerror = () => {\n                console.error('EventSource failed');\n            };\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
